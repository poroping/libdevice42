// Code generated by go-swagger; DO NOT EDIT.

package software

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/poroping/libdevice42/models"
)

// GetSoftwareLicenseKeysReader is a Reader for the GetSoftwareLicenseKeys structure.
type GetSoftwareLicenseKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSoftwareLicenseKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSoftwareLicenseKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSoftwareLicenseKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSoftwareLicenseKeysUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSoftwareLicenseKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSoftwareLicenseKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetSoftwareLicenseKeysMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetSoftwareLicenseKeysGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSoftwareLicenseKeysInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSoftwareLicenseKeysServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSoftwareLicenseKeysOK creates a GetSoftwareLicenseKeysOK with default headers values
func NewGetSoftwareLicenseKeysOK() *GetSoftwareLicenseKeysOK {
	return &GetSoftwareLicenseKeysOK{}
}

/*GetSoftwareLicenseKeysOK handles this case with default header values.

The above command returns results like this:
*/
type GetSoftwareLicenseKeysOK struct {
	Payload *GetSoftwareLicenseKeysOKBody
}

func (o *GetSoftwareLicenseKeysOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysOK  %+v", 200, o.Payload)
}

func (o *GetSoftwareLicenseKeysOK) GetPayload() *GetSoftwareLicenseKeysOKBody {
	return o.Payload
}

func (o *GetSoftwareLicenseKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSoftwareLicenseKeysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSoftwareLicenseKeysBadRequest creates a GetSoftwareLicenseKeysBadRequest with default headers values
func NewGetSoftwareLicenseKeysBadRequest() *GetSoftwareLicenseKeysBadRequest {
	return &GetSoftwareLicenseKeysBadRequest{}
}

/*GetSoftwareLicenseKeysBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetSoftwareLicenseKeysBadRequest struct {
}

func (o *GetSoftwareLicenseKeysBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysBadRequest ", 400)
}

func (o *GetSoftwareLicenseKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysUnauthorized creates a GetSoftwareLicenseKeysUnauthorized with default headers values
func NewGetSoftwareLicenseKeysUnauthorized() *GetSoftwareLicenseKeysUnauthorized {
	return &GetSoftwareLicenseKeysUnauthorized{}
}

/*GetSoftwareLicenseKeysUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetSoftwareLicenseKeysUnauthorized struct {
}

func (o *GetSoftwareLicenseKeysUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysUnauthorized ", 401)
}

func (o *GetSoftwareLicenseKeysUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysForbidden creates a GetSoftwareLicenseKeysForbidden with default headers values
func NewGetSoftwareLicenseKeysForbidden() *GetSoftwareLicenseKeysForbidden {
	return &GetSoftwareLicenseKeysForbidden{}
}

/*GetSoftwareLicenseKeysForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetSoftwareLicenseKeysForbidden struct {
}

func (o *GetSoftwareLicenseKeysForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysForbidden ", 403)
}

func (o *GetSoftwareLicenseKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysNotFound creates a GetSoftwareLicenseKeysNotFound with default headers values
func NewGetSoftwareLicenseKeysNotFound() *GetSoftwareLicenseKeysNotFound {
	return &GetSoftwareLicenseKeysNotFound{}
}

/*GetSoftwareLicenseKeysNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetSoftwareLicenseKeysNotFound struct {
}

func (o *GetSoftwareLicenseKeysNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysNotFound ", 404)
}

func (o *GetSoftwareLicenseKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysMethodNotAllowed creates a GetSoftwareLicenseKeysMethodNotAllowed with default headers values
func NewGetSoftwareLicenseKeysMethodNotAllowed() *GetSoftwareLicenseKeysMethodNotAllowed {
	return &GetSoftwareLicenseKeysMethodNotAllowed{}
}

/*GetSoftwareLicenseKeysMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetSoftwareLicenseKeysMethodNotAllowed struct {
}

func (o *GetSoftwareLicenseKeysMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysMethodNotAllowed ", 405)
}

func (o *GetSoftwareLicenseKeysMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysGone creates a GetSoftwareLicenseKeysGone with default headers values
func NewGetSoftwareLicenseKeysGone() *GetSoftwareLicenseKeysGone {
	return &GetSoftwareLicenseKeysGone{}
}

/*GetSoftwareLicenseKeysGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetSoftwareLicenseKeysGone struct {
}

func (o *GetSoftwareLicenseKeysGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysGone ", 410)
}

func (o *GetSoftwareLicenseKeysGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysInternalServerError creates a GetSoftwareLicenseKeysInternalServerError with default headers values
func NewGetSoftwareLicenseKeysInternalServerError() *GetSoftwareLicenseKeysInternalServerError {
	return &GetSoftwareLicenseKeysInternalServerError{}
}

/*GetSoftwareLicenseKeysInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetSoftwareLicenseKeysInternalServerError struct {
}

func (o *GetSoftwareLicenseKeysInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysInternalServerError ", 500)
}

func (o *GetSoftwareLicenseKeysInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSoftwareLicenseKeysServiceUnavailable creates a GetSoftwareLicenseKeysServiceUnavailable with default headers values
func NewGetSoftwareLicenseKeysServiceUnavailable() *GetSoftwareLicenseKeysServiceUnavailable {
	return &GetSoftwareLicenseKeysServiceUnavailable{}
}

/*GetSoftwareLicenseKeysServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetSoftwareLicenseKeysServiceUnavailable struct {
}

func (o *GetSoftwareLicenseKeysServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/software/license_keys/][%d] getSoftwareLicenseKeysServiceUnavailable ", 503)
}

func (o *GetSoftwareLicenseKeysServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetSoftwareLicenseKeysOKBody get software license keys o k body
swagger:model GetSoftwareLicenseKeysOKBody
*/
type GetSoftwareLicenseKeysOKBody struct {

	// software license keys
	SoftwareLicenseKeys []*models.GetSoftwareLicenseKeys `json:"software_license_keys"`
}

// Validate validates this get software license keys o k body
func (o *GetSoftwareLicenseKeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSoftwareLicenseKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSoftwareLicenseKeysOKBody) validateSoftwareLicenseKeys(formats strfmt.Registry) error {

	if swag.IsZero(o.SoftwareLicenseKeys) { // not required
		return nil
	}

	for i := 0; i < len(o.SoftwareLicenseKeys); i++ {
		if swag.IsZero(o.SoftwareLicenseKeys[i]) { // not required
			continue
		}

		if o.SoftwareLicenseKeys[i] != nil {
			if err := o.SoftwareLicenseKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSoftwareLicenseKeysOK" + "." + "software_license_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSoftwareLicenseKeysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSoftwareLicenseKeysOKBody) UnmarshalBinary(b []byte) error {
	var res GetSoftwareLicenseKeysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
