// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/poroping/libdevice42/models"
)

// GetHistoryReader is a Reader for the GetHistory structure.
type GetHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetHistoryMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetHistoryGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetHistoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetHistoryOK creates a GetHistoryOK with default headers values
func NewGetHistoryOK() *GetHistoryOK {
	return &GetHistoryOK{}
}

/*GetHistoryOK handles this case with default header values.

The above command returns results like this:
*/
type GetHistoryOK struct {
	Payload []*models.GetHistory
}

func (o *GetHistoryOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryOK  %+v", 200, o.Payload)
}

func (o *GetHistoryOK) GetPayload() []*models.GetHistory {
	return o.Payload
}

func (o *GetHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHistoryBadRequest creates a GetHistoryBadRequest with default headers values
func NewGetHistoryBadRequest() *GetHistoryBadRequest {
	return &GetHistoryBadRequest{}
}

/*GetHistoryBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetHistoryBadRequest struct {
}

func (o *GetHistoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryBadRequest ", 400)
}

func (o *GetHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryUnauthorized creates a GetHistoryUnauthorized with default headers values
func NewGetHistoryUnauthorized() *GetHistoryUnauthorized {
	return &GetHistoryUnauthorized{}
}

/*GetHistoryUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetHistoryUnauthorized struct {
}

func (o *GetHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryUnauthorized ", 401)
}

func (o *GetHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryForbidden creates a GetHistoryForbidden with default headers values
func NewGetHistoryForbidden() *GetHistoryForbidden {
	return &GetHistoryForbidden{}
}

/*GetHistoryForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetHistoryForbidden struct {
}

func (o *GetHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryForbidden ", 403)
}

func (o *GetHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryNotFound creates a GetHistoryNotFound with default headers values
func NewGetHistoryNotFound() *GetHistoryNotFound {
	return &GetHistoryNotFound{}
}

/*GetHistoryNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetHistoryNotFound struct {
}

func (o *GetHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryNotFound ", 404)
}

func (o *GetHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryMethodNotAllowed creates a GetHistoryMethodNotAllowed with default headers values
func NewGetHistoryMethodNotAllowed() *GetHistoryMethodNotAllowed {
	return &GetHistoryMethodNotAllowed{}
}

/*GetHistoryMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetHistoryMethodNotAllowed struct {
}

func (o *GetHistoryMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryMethodNotAllowed ", 405)
}

func (o *GetHistoryMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryGone creates a GetHistoryGone with default headers values
func NewGetHistoryGone() *GetHistoryGone {
	return &GetHistoryGone{}
}

/*GetHistoryGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetHistoryGone struct {
}

func (o *GetHistoryGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryGone ", 410)
}

func (o *GetHistoryGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryInternalServerError creates a GetHistoryInternalServerError with default headers values
func NewGetHistoryInternalServerError() *GetHistoryInternalServerError {
	return &GetHistoryInternalServerError{}
}

/*GetHistoryInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetHistoryInternalServerError struct {
}

func (o *GetHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryInternalServerError ", 500)
}

func (o *GetHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetHistoryServiceUnavailable creates a GetHistoryServiceUnavailable with default headers values
func NewGetHistoryServiceUnavailable() *GetHistoryServiceUnavailable {
	return &GetHistoryServiceUnavailable{}
}

/*GetHistoryServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetHistoryServiceUnavailable struct {
}

func (o *GetHistoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/history/][%d] getHistoryServiceUnavailable ", 503)
}

func (o *GetHistoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
