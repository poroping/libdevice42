// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/poroping/libdevice42/models"
)

// PostMultiSerialDeviceReader is a Reader for the PostMultiSerialDevice structure.
type PostMultiSerialDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostMultiSerialDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostMultiSerialDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostMultiSerialDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostMultiSerialDeviceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostMultiSerialDeviceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostMultiSerialDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPostMultiSerialDeviceMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostMultiSerialDeviceGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostMultiSerialDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostMultiSerialDeviceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostMultiSerialDeviceOK creates a PostMultiSerialDeviceOK with default headers values
func NewPostMultiSerialDeviceOK() *PostMultiSerialDeviceOK {
	return &PostMultiSerialDeviceOK{}
}

/*PostMultiSerialDeviceOK handles this case with default header values.

The above command returns results like this:
*/
type PostMultiSerialDeviceOK struct {
	Payload *PostMultiSerialDeviceOKBody
}

func (o *PostMultiSerialDeviceOK) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceOK  %+v", 200, o.Payload)
}

func (o *PostMultiSerialDeviceOK) GetPayload() *PostMultiSerialDeviceOKBody {
	return o.Payload
}

func (o *PostMultiSerialDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostMultiSerialDeviceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostMultiSerialDeviceBadRequest creates a PostMultiSerialDeviceBadRequest with default headers values
func NewPostMultiSerialDeviceBadRequest() *PostMultiSerialDeviceBadRequest {
	return &PostMultiSerialDeviceBadRequest{}
}

/*PostMultiSerialDeviceBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type PostMultiSerialDeviceBadRequest struct {
}

func (o *PostMultiSerialDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceBadRequest ", 400)
}

func (o *PostMultiSerialDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceUnauthorized creates a PostMultiSerialDeviceUnauthorized with default headers values
func NewPostMultiSerialDeviceUnauthorized() *PostMultiSerialDeviceUnauthorized {
	return &PostMultiSerialDeviceUnauthorized{}
}

/*PostMultiSerialDeviceUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type PostMultiSerialDeviceUnauthorized struct {
}

func (o *PostMultiSerialDeviceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceUnauthorized ", 401)
}

func (o *PostMultiSerialDeviceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceForbidden creates a PostMultiSerialDeviceForbidden with default headers values
func NewPostMultiSerialDeviceForbidden() *PostMultiSerialDeviceForbidden {
	return &PostMultiSerialDeviceForbidden{}
}

/*PostMultiSerialDeviceForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type PostMultiSerialDeviceForbidden struct {
}

func (o *PostMultiSerialDeviceForbidden) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceForbidden ", 403)
}

func (o *PostMultiSerialDeviceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceNotFound creates a PostMultiSerialDeviceNotFound with default headers values
func NewPostMultiSerialDeviceNotFound() *PostMultiSerialDeviceNotFound {
	return &PostMultiSerialDeviceNotFound{}
}

/*PostMultiSerialDeviceNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type PostMultiSerialDeviceNotFound struct {
}

func (o *PostMultiSerialDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceNotFound ", 404)
}

func (o *PostMultiSerialDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceMethodNotAllowed creates a PostMultiSerialDeviceMethodNotAllowed with default headers values
func NewPostMultiSerialDeviceMethodNotAllowed() *PostMultiSerialDeviceMethodNotAllowed {
	return &PostMultiSerialDeviceMethodNotAllowed{}
}

/*PostMultiSerialDeviceMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type PostMultiSerialDeviceMethodNotAllowed struct {
}

func (o *PostMultiSerialDeviceMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceMethodNotAllowed ", 405)
}

func (o *PostMultiSerialDeviceMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceGone creates a PostMultiSerialDeviceGone with default headers values
func NewPostMultiSerialDeviceGone() *PostMultiSerialDeviceGone {
	return &PostMultiSerialDeviceGone{}
}

/*PostMultiSerialDeviceGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type PostMultiSerialDeviceGone struct {
}

func (o *PostMultiSerialDeviceGone) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceGone ", 410)
}

func (o *PostMultiSerialDeviceGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceInternalServerError creates a PostMultiSerialDeviceInternalServerError with default headers values
func NewPostMultiSerialDeviceInternalServerError() *PostMultiSerialDeviceInternalServerError {
	return &PostMultiSerialDeviceInternalServerError{}
}

/*PostMultiSerialDeviceInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type PostMultiSerialDeviceInternalServerError struct {
}

func (o *PostMultiSerialDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceInternalServerError ", 500)
}

func (o *PostMultiSerialDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostMultiSerialDeviceServiceUnavailable creates a PostMultiSerialDeviceServiceUnavailable with default headers values
func NewPostMultiSerialDeviceServiceUnavailable() *PostMultiSerialDeviceServiceUnavailable {
	return &PostMultiSerialDeviceServiceUnavailable{}
}

/*PostMultiSerialDeviceServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type PostMultiSerialDeviceServiceUnavailable struct {
}

func (o *PostMultiSerialDeviceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /api/1.0/multiserial_device/][%d] postMultiSerialDeviceServiceUnavailable ", 503)
}

func (o *PostMultiSerialDeviceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostMultiSerialDeviceOKBody post multi serial device o k body
swagger:model PostMultiSerialDeviceOKBody
*/
type PostMultiSerialDeviceOKBody struct {

	// code
	Code interface{} `json:"code,omitempty"`

	// msg
	Msg models.DeviceName `json:"msg,omitempty"`
}

// Validate validates this post multi serial device o k body
func (o *PostMultiSerialDeviceOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostMultiSerialDeviceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostMultiSerialDeviceOKBody) UnmarshalBinary(b []byte) error {
	var res PostMultiSerialDeviceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
