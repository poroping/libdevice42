// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/poroping/libdevice42/models"
)

// GetDevicesNameReader is a Reader for the GetDevicesName structure.
type GetDevicesNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDevicesNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDevicesNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDevicesNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDevicesNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDevicesNameMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetDevicesNameGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDevicesNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDevicesNameServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDevicesNameOK creates a GetDevicesNameOK with default headers values
func NewGetDevicesNameOK() *GetDevicesNameOK {
	return &GetDevicesNameOK{}
}

/*GetDevicesNameOK handles this case with default header values.

The above command returns results like this:
*/
type GetDevicesNameOK struct {
	Payload *models.DevicesCustomerID
}

func (o *GetDevicesNameOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameOK  %+v", 200, o.Payload)
}

func (o *GetDevicesNameOK) GetPayload() *models.DevicesCustomerID {
	return o.Payload
}

func (o *GetDevicesNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DevicesCustomerID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDevicesNameBadRequest creates a GetDevicesNameBadRequest with default headers values
func NewGetDevicesNameBadRequest() *GetDevicesNameBadRequest {
	return &GetDevicesNameBadRequest{}
}

/*GetDevicesNameBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetDevicesNameBadRequest struct {
}

func (o *GetDevicesNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameBadRequest ", 400)
}

func (o *GetDevicesNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameUnauthorized creates a GetDevicesNameUnauthorized with default headers values
func NewGetDevicesNameUnauthorized() *GetDevicesNameUnauthorized {
	return &GetDevicesNameUnauthorized{}
}

/*GetDevicesNameUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetDevicesNameUnauthorized struct {
}

func (o *GetDevicesNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameUnauthorized ", 401)
}

func (o *GetDevicesNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameForbidden creates a GetDevicesNameForbidden with default headers values
func NewGetDevicesNameForbidden() *GetDevicesNameForbidden {
	return &GetDevicesNameForbidden{}
}

/*GetDevicesNameForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetDevicesNameForbidden struct {
}

func (o *GetDevicesNameForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameForbidden ", 403)
}

func (o *GetDevicesNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameNotFound creates a GetDevicesNameNotFound with default headers values
func NewGetDevicesNameNotFound() *GetDevicesNameNotFound {
	return &GetDevicesNameNotFound{}
}

/*GetDevicesNameNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetDevicesNameNotFound struct {
}

func (o *GetDevicesNameNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameNotFound ", 404)
}

func (o *GetDevicesNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameMethodNotAllowed creates a GetDevicesNameMethodNotAllowed with default headers values
func NewGetDevicesNameMethodNotAllowed() *GetDevicesNameMethodNotAllowed {
	return &GetDevicesNameMethodNotAllowed{}
}

/*GetDevicesNameMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetDevicesNameMethodNotAllowed struct {
}

func (o *GetDevicesNameMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameMethodNotAllowed ", 405)
}

func (o *GetDevicesNameMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameGone creates a GetDevicesNameGone with default headers values
func NewGetDevicesNameGone() *GetDevicesNameGone {
	return &GetDevicesNameGone{}
}

/*GetDevicesNameGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetDevicesNameGone struct {
}

func (o *GetDevicesNameGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameGone ", 410)
}

func (o *GetDevicesNameGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameInternalServerError creates a GetDevicesNameInternalServerError with default headers values
func NewGetDevicesNameInternalServerError() *GetDevicesNameInternalServerError {
	return &GetDevicesNameInternalServerError{}
}

/*GetDevicesNameInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetDevicesNameInternalServerError struct {
}

func (o *GetDevicesNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameInternalServerError ", 500)
}

func (o *GetDevicesNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDevicesNameServiceUnavailable creates a GetDevicesNameServiceUnavailable with default headers values
func NewGetDevicesNameServiceUnavailable() *GetDevicesNameServiceUnavailable {
	return &GetDevicesNameServiceUnavailable{}
}

/*GetDevicesNameServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetDevicesNameServiceUnavailable struct {
}

func (o *GetDevicesNameServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/devices/name/{device-name}/][%d] getDevicesNameServiceUnavailable ", 503)
}

func (o *GetDevicesNameServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
