// Code generated by go-swagger; DO NOT EDIT.

package certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/poroping/libdevice42/models"
)

// GetCertificatesReader is a Reader for the GetCertificates structure.
type GetCertificatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCertificatesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCertificatesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCertificatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCertificatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetCertificatesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetCertificatesGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCertificatesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCertificatesOK creates a GetCertificatesOK with default headers values
func NewGetCertificatesOK() *GetCertificatesOK {
	return &GetCertificatesOK{}
}

/*GetCertificatesOK handles this case with default header values.

The above command returns results like this:
*/
type GetCertificatesOK struct {
	Payload *GetCertificatesOKBody
}

func (o *GetCertificatesOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesOK  %+v", 200, o.Payload)
}

func (o *GetCertificatesOK) GetPayload() *GetCertificatesOKBody {
	return o.Payload
}

func (o *GetCertificatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCertificatesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificatesBadRequest creates a GetCertificatesBadRequest with default headers values
func NewGetCertificatesBadRequest() *GetCertificatesBadRequest {
	return &GetCertificatesBadRequest{}
}

/*GetCertificatesBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetCertificatesBadRequest struct {
}

func (o *GetCertificatesBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesBadRequest ", 400)
}

func (o *GetCertificatesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesUnauthorized creates a GetCertificatesUnauthorized with default headers values
func NewGetCertificatesUnauthorized() *GetCertificatesUnauthorized {
	return &GetCertificatesUnauthorized{}
}

/*GetCertificatesUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetCertificatesUnauthorized struct {
}

func (o *GetCertificatesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesUnauthorized ", 401)
}

func (o *GetCertificatesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesForbidden creates a GetCertificatesForbidden with default headers values
func NewGetCertificatesForbidden() *GetCertificatesForbidden {
	return &GetCertificatesForbidden{}
}

/*GetCertificatesForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetCertificatesForbidden struct {
}

func (o *GetCertificatesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesForbidden ", 403)
}

func (o *GetCertificatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesNotFound creates a GetCertificatesNotFound with default headers values
func NewGetCertificatesNotFound() *GetCertificatesNotFound {
	return &GetCertificatesNotFound{}
}

/*GetCertificatesNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetCertificatesNotFound struct {
}

func (o *GetCertificatesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesNotFound ", 404)
}

func (o *GetCertificatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesMethodNotAllowed creates a GetCertificatesMethodNotAllowed with default headers values
func NewGetCertificatesMethodNotAllowed() *GetCertificatesMethodNotAllowed {
	return &GetCertificatesMethodNotAllowed{}
}

/*GetCertificatesMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetCertificatesMethodNotAllowed struct {
}

func (o *GetCertificatesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesMethodNotAllowed ", 405)
}

func (o *GetCertificatesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesGone creates a GetCertificatesGone with default headers values
func NewGetCertificatesGone() *GetCertificatesGone {
	return &GetCertificatesGone{}
}

/*GetCertificatesGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetCertificatesGone struct {
}

func (o *GetCertificatesGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesGone ", 410)
}

func (o *GetCertificatesGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesInternalServerError creates a GetCertificatesInternalServerError with default headers values
func NewGetCertificatesInternalServerError() *GetCertificatesInternalServerError {
	return &GetCertificatesInternalServerError{}
}

/*GetCertificatesInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetCertificatesInternalServerError struct {
}

func (o *GetCertificatesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesInternalServerError ", 500)
}

func (o *GetCertificatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCertificatesServiceUnavailable creates a GetCertificatesServiceUnavailable with default headers values
func NewGetCertificatesServiceUnavailable() *GetCertificatesServiceUnavailable {
	return &GetCertificatesServiceUnavailable{}
}

/*GetCertificatesServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetCertificatesServiceUnavailable struct {
}

func (o *GetCertificatesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/certificates/][%d] getCertificatesServiceUnavailable ", 503)
}

func (o *GetCertificatesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetCertificatesOKBody get certificates o k body
swagger:model GetCertificatesOKBody
*/
type GetCertificatesOKBody struct {

	// certificate details
	CertificateDetails []*models.GetCertificates `json:"certificate_details"`

	// total count
	TotalCount interface{} `json:"total_count,omitempty"`
}

// Validate validates this get certificates o k body
func (o *GetCertificatesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCertificateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCertificatesOKBody) validateCertificateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.CertificateDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.CertificateDetails); i++ {
		if swag.IsZero(o.CertificateDetails[i]) { // not required
			continue
		}

		if o.CertificateDetails[i] != nil {
			if err := o.CertificateDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCertificatesOK" + "." + "certificate_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCertificatesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCertificatesOKBody) UnmarshalBinary(b []byte) error {
	var res GetCertificatesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
