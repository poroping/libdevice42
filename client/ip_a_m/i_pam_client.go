// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ip a m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ip a m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteIPAMDNSRecords(params *DeleteIPAMDNSRecordsParams) (*DeleteIPAMDNSRecordsOK, error)

	DeleteIPAMIpnat(params *DeleteIPAMIpnatParams) (*DeleteIPAMIpnatOK, error)

	DeleteIPAMIps(params *DeleteIPAMIpsParams) (*DeleteIPAMIpsOK, error)

	DeleteIPAMMacsID(params *DeleteIPAMMacsIDParams) (*DeleteIPAMMacsIDOK, error)

	DeleteIPAMSwitchports(params *DeleteIPAMSwitchportsParams) (*DeleteIPAMSwitchportsOK, error)

	DeleteIPAMsubnetcategory(params *DeleteIPAMsubnetcategoryParams) (*DeleteIPAMsubnetcategoryOK, error)

	DeleteIPAMsubnets(params *DeleteIPAMsubnetsParams) (*DeleteIPAMsubnetsOK, error)

	DeleteIPAMvlans(params *DeleteIPAMvlansParams) (*DeleteIPAMvlansOK, error)

	DeleteIPAMvrfgroupID(params *DeleteIPAMvrfgroupIDParams) (*DeleteIPAMvrfgroupIDOK, error)

	GetIPAMCustomerID(params *GetIPAMCustomerIDParams) (*GetIPAMCustomerIDOK, error)

	GetIPAMDNSRecords(params *GetIPAMDNSRecordsParams) (*GetIPAMDNSRecordsOK, error)

	GetIPAMIpnat(params *GetIPAMIpnatParams) (*GetIPAMIpnatOK, error)

	GetIPAMIps(params *GetIPAMIpsParams) (*GetIPAMIpsOK, error)

	GetIPAMIpsSubnetID(params *GetIPAMIpsSubnetIDParams) (*GetIPAMIpsSubnetIDOK, error)

	GetIPAMMacs(params *GetIPAMMacsParams) (*GetIPAMMacsOK, error)

	GetIPAMMacsID(params *GetIPAMMacsIDParams) (*GetIPAMMacsIDOK, error)

	GetIPAMSearch(params *GetIPAMSearchParams) (*GetIPAMSearchOK, error)

	GetIPAMSubnetID(params *GetIPAMSubnetIDParams) (*GetIPAMSubnetIDOK, error)

	GetIPAMSuggestIP(params *GetIPAMSuggestIPParams) (*GetIPAMSuggestIPOK, error)

	GetIPAMSuggestSubnetID(params *GetIPAMSuggestSubnetIDParams) (*GetIPAMSuggestSubnetIDOK, error)

	GetIPAMSwitchTemplates(params *GetIPAMSwitchTemplatesParams) (*GetIPAMSwitchTemplatesOK, error)

	GetIPAMSwitchports(params *GetIPAMSwitchportsParams) (*GetIPAMSwitchportsOK, error)

	GetIPAMTapPorts(params *GetIPAMTapPortsParams) (*GetIPAMTapPortsOK, error)

	GetIPAMsubnetcategory(params *GetIPAMsubnetcategoryParams) (*GetIPAMsubnetcategoryOK, error)

	GetIPAMsubnets(params *GetIPAMsubnetsParams) (*GetIPAMsubnetsOK, error)

	GetIPAMvlans(params *GetIPAMvlansParams) (*GetIPAMvlansOK, error)

	GetIPAMvlansID(params *GetIPAMvlansIDParams) (*GetIPAMvlansIDOK, error)

	GetIPAMvrfgroup(params *GetIPAMvrfgroupParams) (*GetIPAMvrfgroupOK, error)

	PostIPAMDNSRecords(params *PostIPAMDNSRecordsParams) (*PostIPAMDNSRecordsOK, error)

	PostIPAMDNSZones(params *PostIPAMDNSZonesParams) (*PostIPAMDNSZonesOK, error)

	PostIPAMIpnat(params *PostIPAMIpnatParams) (*PostIPAMIpnatOK, error)

	PostIPAMIps(params *PostIPAMIpsParams) (*PostIPAMIpsOK, error)

	PostIPAMMacs(params *PostIPAMMacsParams) (*PostIPAMMacsOK, error)

	PostIPAMSubnetsCreateChild(params *PostIPAMSubnetsCreateChildParams) (*PostIPAMSubnetsCreateChildOK, error)

	PostIPAMSwitches(params *PostIPAMSwitchesParams) (*PostIPAMSwitchesOK, error)

	PostIPAMSwitchports(params *PostIPAMSwitchportsParams) (*PostIPAMSwitchportsOK, error)

	PostIPAMTapPorts(params *PostIPAMTapPortsParams) (*PostIPAMTapPortsOK, error)

	PostIPAMsubnetcategory(params *PostIPAMsubnetcategoryParams) (*PostIPAMsubnetcategoryOK, error)

	PostIPAMsubnets(params *PostIPAMsubnetsParams) (*PostIPAMsubnetsOK, error)

	PostIPAMvlans(params *PostIPAMvlansParams) (*PostIPAMvlansOK, error)

	PostIPAMvlansSmartMergeAll(params *PostIPAMvlansSmartMergeAllParams) (*PostIPAMvlansSmartMergeAllOK, error)

	PostIPAMvrfgroup(params *PostIPAMvrfgroupParams) (*PostIPAMvrfgroupOK, error)

	PutIPAMCustomFIipAddress(params *PutIPAMCustomFIipAddressParams) (*PutIPAMCustomFIipAddressOK, error)

	PutIPAMCustomFIsubnet(params *PutIPAMCustomFIsubnetParams) (*PutIPAMCustomFIsubnetOK, error)

	PutIPAMCustomFIswitchport(params *PutIPAMCustomFIswitchportParams) (*PutIPAMCustomFIswitchportOK, error)

	PutIPAMCustomFIvrfgroup(params *PutIPAMCustomFIvrfgroupParams) (*PutIPAMCustomFIvrfgroupOK, error)

	PutIPAMIpnat(params *PutIPAMIpnatParams) (*PutIPAMIpnatOK, error)

	PutIPAMsubnetcategory(params *PutIPAMsubnetcategoryParams) (*PutIPAMsubnetcategoryOK, error)

	PutIPAMsubnets(params *PutIPAMsubnetsParams) (*PutIPAMsubnetsOK, error)

	PutIPAMvlans(params *PutIPAMvlansParams) (*PutIPAMvlansOK, error)

	PutIPAMvrfgroup(params *PutIPAMvrfgroupParams) (*PutIPAMvrfgroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteIPAMDNSRecords deletes DNS records

  This API is used to delete the DNS record with the DNS Record id supplied as the required argument.
*/
func (a *Client) DeleteIPAMDNSRecords(params *DeleteIPAMDNSRecordsParams) (*DeleteIPAMDNSRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAM_dns_records",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/dns/records/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMDNSRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAM_dns_records: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMIpnat this API is used to delete the IP n a t

  Delete IP NAT
*/
func (a *Client) DeleteIPAMIpnat(params *DeleteIPAMIpnatParams) (*DeleteIPAMIpnatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMIpnatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAM_ipnat",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/ipnat/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMIpnatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMIpnatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAM_ipnat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMIps deletes IP address

  This API is used to delete an IP Address with the IP Address id supplied as the required argument.
*/
func (a *Client) DeleteIPAMIps(params *DeleteIPAMIpsParams) (*DeleteIPAMIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAM_ips",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/ips/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMIpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAM_ips: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMMacsID deletes mac address

  This API is used to delete the mac address with the mac address id supplied as the required argument.
*/
func (a *Client) DeleteIPAMMacsID(params *DeleteIPAMMacsIDParams) (*DeleteIPAMMacsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMMacsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAM_macs_id",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/macs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMMacsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMMacsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAM_macs_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMSwitchports deletes switchport

  This API is used to delete the switch port with the switch port id supplied as the required argument.
*/
func (a *Client) DeleteIPAMSwitchports(params *DeleteIPAMSwitchportsParams) (*DeleteIPAMSwitchportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMSwitchportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAM_switchports",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/switchports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMSwitchportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMSwitchportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAM_switchports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMsubnetcategory deletes subnet category

  This API is used to delete the subnet category with the subnet category id supplied as the required argument.
*/
func (a *Client) DeleteIPAMsubnetcategory(params *DeleteIPAMsubnetcategoryParams) (*DeleteIPAMsubnetcategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMsubnetcategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAMsubnetcategory",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/subnet_category/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMsubnetcategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMsubnetcategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAMsubnetcategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMsubnets deletes subnet

  This API is used to delete the subnet with the subnet id supplied as the required argument.
*/
func (a *Client) DeleteIPAMsubnets(params *DeleteIPAMsubnetsParams) (*DeleteIPAMsubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMsubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAMsubnets",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/subnets/{subnet_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMsubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMsubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAMsubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMvlans deletes v l a n

  This API is used to delete the vlan with the vlan id supplied as the required argument.
*/
func (a *Client) DeleteIPAMvlans(params *DeleteIPAMvlansParams) (*DeleteIPAMvlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMvlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAMvlans",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMvlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMvlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAMvlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIPAMvrfgroupID deletes v r f group

  This API is used to delete the vrf group with the vrf group id supplied as the required argument.
*/
func (a *Client) DeleteIPAMvrfgroupID(params *DeleteIPAMvrfgroupIDParams) (*DeleteIPAMvrfgroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIPAMvrfgroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIPAMvrfgroupId",
		Method:             "DELETE",
		PathPattern:        "/api/1.0/vrfgroup/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteIPAMvrfgroupIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIPAMvrfgroupIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIPAMvrfgroupId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMCustomerID gs e t method retrieves all subnets by customer ID

  Get all Subnets by Customer
*/
func (a *Client) GetIPAMCustomerID(params *GetIPAMCustomerIDParams) (*GetIPAMCustomerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMCustomerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_customer_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/subnets/customer_id/{customer_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMCustomerIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMCustomerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_customer_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMDNSRecords gs e t method retrieves all DNS records added in v6 5 0

  Get DNS Records
*/
func (a *Client) GetIPAMDNSRecords(params *GetIPAMDNSRecordsParams) (*GetIPAMDNSRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_dns_records",
		Method:             "GET",
		PathPattern:        "/api/1.0/dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMDNSRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_dns_records: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMIpnat gs e t method retrieves all switch templates

  Get all IP NAT Records
*/
func (a *Client) GetIPAMIpnat(params *GetIPAMIpnatParams) (*GetIPAMIpnatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMIpnatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_ipnat",
		Method:             "GET",
		PathPattern:        "/api/1.0/ipnat/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMIpnatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMIpnatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_ipnat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMIps gets all i ps

  GET method retrieves all IPs. (Added in v5.9.3) By default the limit is maximum 1000 IPs per call. Use total_count and offset if over 1000 IPs.
*/
func (a *Client) GetIPAMIps(params *GetIPAMIpsParams) (*GetIPAMIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_ips",
		Method:             "GET",
		PathPattern:        "/api/1.0/ips/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMIpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_ips: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMIpsSubnetID gs e t method retrieves all i ps by subnet ID

  Get all IPs in a Subnet
*/
func (a *Client) GetIPAMIpsSubnetID(params *GetIPAMIpsSubnetIDParams) (*GetIPAMIpsSubnetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMIpsSubnetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_ips_subnet_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/ips/subnet_id/{subnet_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMIpsSubnetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMIpsSubnetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_ips_subnet_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMMacs gs e t method retrieves all m a c addresses

  Get all MAC Addresses
*/
func (a *Client) GetIPAMMacs(params *GetIPAMMacsParams) (*GetIPAMMacsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMMacsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_macs",
		Method:             "GET",
		PathPattern:        "/api/1.0/macs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMMacsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMMacsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_macs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMMacsID gs e t method retrieves m a c address by specific m a c ID

  Get MAC Address with ID
*/
func (a *Client) GetIPAMMacsID(params *GetIPAMMacsIDParams) (*GetIPAMMacsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMMacsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_macs_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/macs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMMacsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMMacsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_macs_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMSearch finds a specific IP address

  Find Specific IP Address
*/
func (a *Client) GetIPAMSearch(params *GetIPAMSearchParams) (*GetIPAMSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_search",
		Method:             "GET",
		PathPattern:        "/api/1.0/search/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMSubnetID gets subnet by subnet ID

  GET method retrieves the subnet with the specified subnet id.
*/
func (a *Client) GetIPAMSubnetID(params *GetIPAMSubnetIDParams) (*GetIPAMSubnetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMSubnetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_subnet_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/subnets/{subnet_id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMSubnetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMSubnetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_subnet_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMSuggestIP suggests next available IP address can be IPv4 or IPv6

  Suggest next available IP Address
*/
func (a *Client) GetIPAMSuggestIP(params *GetIPAMSuggestIPParams) (*GetIPAMSuggestIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMSuggestIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_suggest_ip",
		Method:             "GET",
		PathPattern:        "/api/1.0/suggest_ip/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMSuggestIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMSuggestIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_suggest_ip: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMSuggestSubnetID suggests next available subnet

  Suggest next available Subnet
*/
func (a *Client) GetIPAMSuggestSubnetID(params *GetIPAMSuggestSubnetIDParams) (*GetIPAMSuggestSubnetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMSuggestSubnetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_suggest_subnet_Id",
		Method:             "GET",
		PathPattern:        "/api/1.0/suggest_subnet/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMSuggestSubnetIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMSuggestSubnetIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_suggest_subnet_Id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMSwitchTemplates gs e t method retrieves all switch templates

  Get all Switch Templates
*/
func (a *Client) GetIPAMSwitchTemplates(params *GetIPAMSwitchTemplatesParams) (*GetIPAMSwitchTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMSwitchTemplatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_switch_templates",
		Method:             "GET",
		PathPattern:        "/api/1.0/switch_templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMSwitchTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMSwitchTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_switch_templates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMSwitchports gs e t method retrieves all switch ports

  Get all Switch Ports
*/
func (a *Client) GetIPAMSwitchports(params *GetIPAMSwitchportsParams) (*GetIPAMSwitchportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMSwitchportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_switchports",
		Method:             "GET",
		PathPattern:        "/api/1.0/switchports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMSwitchportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMSwitchportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_switchports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMTapPorts gs e t method retrieves all t a p ports

  Get Tap Ports
*/
func (a *Client) GetIPAMTapPorts(params *GetIPAMTapPortsParams) (*GetIPAMTapPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMTapPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAM_tap_ports",
		Method:             "GET",
		PathPattern:        "/api/1.0/tap_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMTapPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMTapPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAM_tap_ports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMsubnetcategory gs e t method retrieves all subnet categories

  Get all Subnet Categories
*/
func (a *Client) GetIPAMsubnetcategory(params *GetIPAMsubnetcategoryParams) (*GetIPAMsubnetcategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMsubnetcategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAMsubnetcategory",
		Method:             "GET",
		PathPattern:        "/api/1.0/subnet_category/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMsubnetcategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMsubnetcategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAMsubnetcategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMsubnets gs e t method retrieves all subnets

  Get all Subnets - Filter parameters are below.
*/
func (a *Client) GetIPAMsubnets(params *GetIPAMsubnetsParams) (*GetIPAMsubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMsubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAMsubnets",
		Method:             "GET",
		PathPattern:        "/api/1.0/subnets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMsubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMsubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAMsubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMvlans gs e t method retrieves all v l a ns

  Get all VLANs
*/
func (a *Client) GetIPAMvlans(params *GetIPAMvlansParams) (*GetIPAMvlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMvlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAMvlans",
		Method:             "GET",
		PathPattern:        "/api/1.0/vlans/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMvlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMvlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAMvlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMvlansID gets v l a n by ID

  GET method retrieves VLAN by specific VLAN ID.
*/
func (a *Client) GetIPAMvlansID(params *GetIPAMvlansIDParams) (*GetIPAMvlansIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMvlansIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAMvlans_id",
		Method:             "GET",
		PathPattern:        "/api/1.0/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMvlansIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMvlansIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAMvlans_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIPAMvrfgroup gs e t method retrieves all v r f groups

  Get all VRF Groups
*/
func (a *Client) GetIPAMvrfgroup(params *GetIPAMvrfgroupParams) (*GetIPAMvrfgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPAMvrfgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIPAMvrfgroup",
		Method:             "GET",
		PathPattern:        "/api/1.0/vrfgroup/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPAMvrfgroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIPAMvrfgroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIPAMvrfgroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMDNSRecords creates DNS records

  Create / Update DNS Records
*/
func (a *Client) PostIPAMDNSRecords(params *PostIPAMDNSRecordsParams) (*PostIPAMDNSRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMDNSRecordsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_dns_records",
		Method:             "POST",
		PathPattern:        "/api/1.0/dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMDNSRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMDNSRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_dns_records: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMDNSZones creates DNS zones

  Create / Update DNS Zones
*/
func (a *Client) PostIPAMDNSZones(params *PostIPAMDNSZonesParams) (*PostIPAMDNSZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMDNSZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_dns_zones",
		Method:             "POST",
		PathPattern:        "/api/1.0/dns/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMDNSZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMDNSZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_dns_zones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMIpnat creates IP n a t

  Create IP NAT
*/
func (a *Client) PostIPAMIpnat(params *PostIPAMIpnatParams) (*PostIPAMIpnatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMIpnatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_ipnat",
		Method:             "POST",
		PathPattern:        "/api/1.0/ipnat/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMIpnatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMIpnatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_ipnat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMIps creates update IP addresses

  Create / Update IP Addresses
*/
func (a *Client) PostIPAMIps(params *PostIPAMIpsParams) (*PostIPAMIpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMIpsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_ips",
		Method:             "POST",
		PathPattern:        "/api/1.0/ips/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMIpsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMIpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_ips: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMMacs creates update m a c addresses

  Create / Update MAC Addresses. Deprecated since v12.0. Please use /switchports/ for more detailed information.
*/
func (a *Client) PostIPAMMacs(params *PostIPAMMacsParams) (*PostIPAMMacsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMMacsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_macs",
		Method:             "POST",
		PathPattern:        "/api/1.0/macs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMMacsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMMacsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_macs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMSubnetsCreateChild creates child subnet

  Create Child Subnet. Required parameters: <ul><li>mask_bits</li> <li>parent_subnet_id <b>OR</b> vrf_group <b>OR</b> vrf_group_id</li>
*/
func (a *Client) PostIPAMSubnetsCreateChild(params *PostIPAMSubnetsCreateChildParams) (*PostIPAMSubnetsCreateChildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMSubnetsCreateChildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_subnets_create_child",
		Method:             "POST",
		PathPattern:        "/api/1.0/subnets/create_child/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMSubnetsCreateChildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMSubnetsCreateChildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_subnets_create_child: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMSwitches adds switch switch ports w templates

  Create or update using Switch Templates. Required parameters: <ul><li>device <b>OR</b> device_id</li> <li>switch_template_id</li>
*/
func (a *Client) PostIPAMSwitches(params *PostIPAMSwitchesParams) (*PostIPAMSwitchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMSwitchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_switches",
		Method:             "POST",
		PathPattern:        "/api/1.0/switches/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMSwitchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMSwitchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_switches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMSwitchports creates update switch port by port

  Create / Update Switch Ports. <b>port</b> or <b>hwaddress</b> are required.
*/
func (a *Client) PostIPAMSwitchports(params *PostIPAMSwitchportsParams) (*PostIPAMSwitchportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMSwitchportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_switchports",
		Method:             "POST",
		PathPattern:        "/api/1.0/switchports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMSwitchportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMSwitchportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_switchports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMTapPorts creates update t a p ports

  Create / Update TAP Ports. Required parameters: <ul><li>id <b>OR</b> name</li>
*/
func (a *Client) PostIPAMTapPorts(params *PostIPAMTapPortsParams) (*PostIPAMTapPortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMTapPortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAM_tap_ports",
		Method:             "POST",
		PathPattern:        "/api/1.0/tap_ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMTapPortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMTapPortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAM_tap_ports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMsubnetcategory Create Subnet Category.
*/
func (a *Client) PostIPAMsubnetcategory(params *PostIPAMsubnetcategoryParams) (*PostIPAMsubnetcategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMsubnetcategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAMsubnetcategory",
		Method:             "POST",
		PathPattern:        "/api/1.0/subnet_category/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMsubnetcategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMsubnetcategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAMsubnetcategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMsubnets creates update subnets

  Create / Update Subnets
*/
func (a *Client) PostIPAMsubnets(params *PostIPAMsubnetsParams) (*PostIPAMsubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMsubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAMsubnets",
		Method:             "POST",
		PathPattern:        "/api/1.0/subnets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMsubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMsubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAMsubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMvlans creates v l a n s

  Create VLANS
*/
func (a *Client) PostIPAMvlans(params *PostIPAMvlansParams) (*PostIPAMvlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMvlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAMvlans",
		Method:             "POST",
		PathPattern:        "/api/1.0/vlans/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMvlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMvlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAMvlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMvlansSmartMergeAll updates v l a n s by ID in url

  Smart Merge VLANS
*/
func (a *Client) PostIPAMvlansSmartMergeAll(params *PostIPAMvlansSmartMergeAllParams) (*PostIPAMvlansSmartMergeAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMvlansSmartMergeAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAMvlans_smart_merge_all",
		Method:             "POST",
		PathPattern:        "/api/1.0/vlans/smart_merge_all/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMvlansSmartMergeAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMvlansSmartMergeAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAMvlans_smart_merge_all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostIPAMvrfgroup creates update v r f group

  Create/Update VRF Group
*/
func (a *Client) PostIPAMvrfgroup(params *PostIPAMvrfgroupParams) (*PostIPAMvrfgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIPAMvrfgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postIPAMvrfgroup",
		Method:             "POST",
		PathPattern:        "/api/1.0/vrfgroup/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostIPAMvrfgroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostIPAMvrfgroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postIPAMvrfgroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMCustomFIipAddress creates update custom fields for subnets

  Subnet Custom Fields
*/
func (a *Client) PutIPAMCustomFIipAddress(params *PutIPAMCustomFIipAddressParams) (*PutIPAMCustomFIipAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMCustomFIipAddressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMCustomFIip_address",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/ip_address/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMCustomFIipAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMCustomFIipAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMCustomFIip_address: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMCustomFIsubnet creates update custom fields for subnets

  Subnet Custom Fields
*/
func (a *Client) PutIPAMCustomFIsubnet(params *PutIPAMCustomFIsubnetParams) (*PutIPAMCustomFIsubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMCustomFIsubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMCustomFIsubnet",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/subnet/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMCustomFIsubnetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMCustomFIsubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMCustomFIsubnet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMCustomFIswitchport creates update switch port custom fields

  Required parameters: <ul><li>id <b>OR</b> port <b>AND</b> device_name</li> <li>key</li>
*/
func (a *Client) PutIPAMCustomFIswitchport(params *PutIPAMCustomFIswitchportParams) (*PutIPAMCustomFIswitchportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMCustomFIswitchportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMCustomFIswitchport",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/switchport/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMCustomFIswitchportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMCustomFIswitchportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMCustomFIswitchport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMCustomFIvrfgroup vs r f group custom fields

  Create/update custom fields for VRF groups. Required parameters: <ul><li>name <b>OR</b> ID</li> <li>key</li>
*/
func (a *Client) PutIPAMCustomFIvrfgroup(params *PutIPAMCustomFIvrfgroupParams) (*PutIPAMCustomFIvrfgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMCustomFIvrfgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMCustomFIvrfgroup",
		Method:             "PUT",
		PathPattern:        "/api/1.0/custom_fields/vrfgroup/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMCustomFIvrfgroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMCustomFIvrfgroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMCustomFIvrfgroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMIpnat updates IP n a t added in v7 0 0

  Update IP NAT
*/
func (a *Client) PutIPAMIpnat(params *PutIPAMIpnatParams) (*PutIPAMIpnatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMIpnatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAM_ipnat",
		Method:             "PUT",
		PathPattern:        "/api/1.0/ipnat/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMIpnatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMIpnatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAM_ipnat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMsubnetcategory creates subnet category

  Update a Specific Subnet Category
*/
func (a *Client) PutIPAMsubnetcategory(params *PutIPAMsubnetcategoryParams) (*PutIPAMsubnetcategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMsubnetcategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMsubnetcategory",
		Method:             "PUT",
		PathPattern:        "/api/1.0/subnet_category/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMsubnetcategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMsubnetcategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMsubnetcategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMsubnets creates update subnets

  Update a Specific Subnet
*/
func (a *Client) PutIPAMsubnets(params *PutIPAMsubnetsParams) (*PutIPAMsubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMsubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMsubnets",
		Method:             "PUT",
		PathPattern:        "/api/1.0/subnets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMsubnetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMsubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMsubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMvlans updates v l a n s by ID in url

  Update VLANS
*/
func (a *Client) PutIPAMvlans(params *PutIPAMvlansParams) (*PutIPAMvlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMvlansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMvlans",
		Method:             "PUT",
		PathPattern:        "/api/1.0/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMvlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMvlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMvlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutIPAMvrfgroup updates v r f group

  Update a Specific VRF Group
*/
func (a *Client) PutIPAMvrfgroup(params *PutIPAMvrfgroupParams) (*PutIPAMvrfgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIPAMvrfgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putIPAMvrfgroup",
		Method:             "PUT",
		PathPattern:        "/api/1.0/vrfgroup/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutIPAMvrfgroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutIPAMvrfgroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putIPAMvrfgroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
