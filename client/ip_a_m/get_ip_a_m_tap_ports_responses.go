// Code generated by go-swagger; DO NOT EDIT.

package ip_a_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/poroping/libdevice42/models"
)

// GetIPAMTapPortsReader is a Reader for the GetIPAMTapPorts structure.
type GetIPAMTapPortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIPAMTapPortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIPAMTapPortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetIPAMTapPortsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetIPAMTapPortsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetIPAMTapPortsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetIPAMTapPortsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetIPAMTapPortsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetIPAMTapPortsGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetIPAMTapPortsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetIPAMTapPortsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIPAMTapPortsOK creates a GetIPAMTapPortsOK with default headers values
func NewGetIPAMTapPortsOK() *GetIPAMTapPortsOK {
	return &GetIPAMTapPortsOK{}
}

/*GetIPAMTapPortsOK handles this case with default header values.

The above command returns results like this:
*/
type GetIPAMTapPortsOK struct {
	Payload *GetIPAMTapPortsOKBody
}

func (o *GetIPAMTapPortsOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsOK  %+v", 200, o.Payload)
}

func (o *GetIPAMTapPortsOK) GetPayload() *GetIPAMTapPortsOKBody {
	return o.Payload
}

func (o *GetIPAMTapPortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIPAMTapPortsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIPAMTapPortsBadRequest creates a GetIPAMTapPortsBadRequest with default headers values
func NewGetIPAMTapPortsBadRequest() *GetIPAMTapPortsBadRequest {
	return &GetIPAMTapPortsBadRequest{}
}

/*GetIPAMTapPortsBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetIPAMTapPortsBadRequest struct {
}

func (o *GetIPAMTapPortsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsBadRequest ", 400)
}

func (o *GetIPAMTapPortsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsUnauthorized creates a GetIPAMTapPortsUnauthorized with default headers values
func NewGetIPAMTapPortsUnauthorized() *GetIPAMTapPortsUnauthorized {
	return &GetIPAMTapPortsUnauthorized{}
}

/*GetIPAMTapPortsUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetIPAMTapPortsUnauthorized struct {
}

func (o *GetIPAMTapPortsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsUnauthorized ", 401)
}

func (o *GetIPAMTapPortsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsForbidden creates a GetIPAMTapPortsForbidden with default headers values
func NewGetIPAMTapPortsForbidden() *GetIPAMTapPortsForbidden {
	return &GetIPAMTapPortsForbidden{}
}

/*GetIPAMTapPortsForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetIPAMTapPortsForbidden struct {
}

func (o *GetIPAMTapPortsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsForbidden ", 403)
}

func (o *GetIPAMTapPortsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsNotFound creates a GetIPAMTapPortsNotFound with default headers values
func NewGetIPAMTapPortsNotFound() *GetIPAMTapPortsNotFound {
	return &GetIPAMTapPortsNotFound{}
}

/*GetIPAMTapPortsNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetIPAMTapPortsNotFound struct {
}

func (o *GetIPAMTapPortsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsNotFound ", 404)
}

func (o *GetIPAMTapPortsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsMethodNotAllowed creates a GetIPAMTapPortsMethodNotAllowed with default headers values
func NewGetIPAMTapPortsMethodNotAllowed() *GetIPAMTapPortsMethodNotAllowed {
	return &GetIPAMTapPortsMethodNotAllowed{}
}

/*GetIPAMTapPortsMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetIPAMTapPortsMethodNotAllowed struct {
}

func (o *GetIPAMTapPortsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsMethodNotAllowed ", 405)
}

func (o *GetIPAMTapPortsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsGone creates a GetIPAMTapPortsGone with default headers values
func NewGetIPAMTapPortsGone() *GetIPAMTapPortsGone {
	return &GetIPAMTapPortsGone{}
}

/*GetIPAMTapPortsGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetIPAMTapPortsGone struct {
}

func (o *GetIPAMTapPortsGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsGone ", 410)
}

func (o *GetIPAMTapPortsGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsInternalServerError creates a GetIPAMTapPortsInternalServerError with default headers values
func NewGetIPAMTapPortsInternalServerError() *GetIPAMTapPortsInternalServerError {
	return &GetIPAMTapPortsInternalServerError{}
}

/*GetIPAMTapPortsInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetIPAMTapPortsInternalServerError struct {
}

func (o *GetIPAMTapPortsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsInternalServerError ", 500)
}

func (o *GetIPAMTapPortsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetIPAMTapPortsServiceUnavailable creates a GetIPAMTapPortsServiceUnavailable with default headers values
func NewGetIPAMTapPortsServiceUnavailable() *GetIPAMTapPortsServiceUnavailable {
	return &GetIPAMTapPortsServiceUnavailable{}
}

/*GetIPAMTapPortsServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetIPAMTapPortsServiceUnavailable struct {
}

func (o *GetIPAMTapPortsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/tap_ports/][%d] getIpAMTapPortsServiceUnavailable ", 503)
}

func (o *GetIPAMTapPortsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetIPAMTapPortsOKBody get IP a m tap ports o k body
swagger:model GetIPAMTapPortsOKBody
*/
type GetIPAMTapPortsOKBody struct {

	// tap ports
	TapPorts []*models.IPMtapPorts `json:"tap_ports"`
}

// Validate validates this get IP a m tap ports o k body
func (o *GetIPAMTapPortsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTapPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIPAMTapPortsOKBody) validateTapPorts(formats strfmt.Registry) error {

	if swag.IsZero(o.TapPorts) { // not required
		return nil
	}

	for i := 0; i < len(o.TapPorts); i++ {
		if swag.IsZero(o.TapPorts[i]) { // not required
			continue
		}

		if o.TapPorts[i] != nil {
			if err := o.TapPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIpAMTapPortsOK" + "." + "tap_ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIPAMTapPortsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIPAMTapPortsOKBody) UnmarshalBinary(b []byte) error {
	var res GetIPAMTapPortsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
