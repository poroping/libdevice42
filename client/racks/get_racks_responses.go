// Code generated by go-swagger; DO NOT EDIT.

package racks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/poroping/libdevice42/models"
)

// GetRacksReader is a Reader for the GetRacks structure.
type GetRacksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRacksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRacksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRacksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRacksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRacksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRacksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetRacksMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetRacksGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRacksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetRacksServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRacksOK creates a GetRacksOK with default headers values
func NewGetRacksOK() *GetRacksOK {
	return &GetRacksOK{}
}

/*GetRacksOK handles this case with default header values.

The above command returns results like this:
*/
type GetRacksOK struct {
	Payload *GetRacksOKBody
}

func (o *GetRacksOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksOK  %+v", 200, o.Payload)
}

func (o *GetRacksOK) GetPayload() *GetRacksOKBody {
	return o.Payload
}

func (o *GetRacksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRacksOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRacksBadRequest creates a GetRacksBadRequest with default headers values
func NewGetRacksBadRequest() *GetRacksBadRequest {
	return &GetRacksBadRequest{}
}

/*GetRacksBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetRacksBadRequest struct {
}

func (o *GetRacksBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksBadRequest ", 400)
}

func (o *GetRacksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksUnauthorized creates a GetRacksUnauthorized with default headers values
func NewGetRacksUnauthorized() *GetRacksUnauthorized {
	return &GetRacksUnauthorized{}
}

/*GetRacksUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetRacksUnauthorized struct {
}

func (o *GetRacksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksUnauthorized ", 401)
}

func (o *GetRacksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksForbidden creates a GetRacksForbidden with default headers values
func NewGetRacksForbidden() *GetRacksForbidden {
	return &GetRacksForbidden{}
}

/*GetRacksForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetRacksForbidden struct {
}

func (o *GetRacksForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksForbidden ", 403)
}

func (o *GetRacksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksNotFound creates a GetRacksNotFound with default headers values
func NewGetRacksNotFound() *GetRacksNotFound {
	return &GetRacksNotFound{}
}

/*GetRacksNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetRacksNotFound struct {
}

func (o *GetRacksNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksNotFound ", 404)
}

func (o *GetRacksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksMethodNotAllowed creates a GetRacksMethodNotAllowed with default headers values
func NewGetRacksMethodNotAllowed() *GetRacksMethodNotAllowed {
	return &GetRacksMethodNotAllowed{}
}

/*GetRacksMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetRacksMethodNotAllowed struct {
}

func (o *GetRacksMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksMethodNotAllowed ", 405)
}

func (o *GetRacksMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksGone creates a GetRacksGone with default headers values
func NewGetRacksGone() *GetRacksGone {
	return &GetRacksGone{}
}

/*GetRacksGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetRacksGone struct {
}

func (o *GetRacksGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksGone ", 410)
}

func (o *GetRacksGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksInternalServerError creates a GetRacksInternalServerError with default headers values
func NewGetRacksInternalServerError() *GetRacksInternalServerError {
	return &GetRacksInternalServerError{}
}

/*GetRacksInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetRacksInternalServerError struct {
}

func (o *GetRacksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksInternalServerError ", 500)
}

func (o *GetRacksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRacksServiceUnavailable creates a GetRacksServiceUnavailable with default headers values
func NewGetRacksServiceUnavailable() *GetRacksServiceUnavailable {
	return &GetRacksServiceUnavailable{}
}

/*GetRacksServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetRacksServiceUnavailable struct {
}

func (o *GetRacksServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/racks/][%d] getRacksServiceUnavailable ", 503)
}

func (o *GetRacksServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetRacksOKBody get racks o k body
swagger:model GetRacksOKBody
*/
type GetRacksOKBody struct {

	// limit
	Limit interface{} `json:"limit,omitempty"`

	// offset
	Offset interface{} `json:"offset,omitempty"`

	// racks
	Racks []*models.Racks `json:"racks"`

	// total count
	TotalCount interface{} `json:"total_count,omitempty"`
}

// Validate validates this get racks o k body
func (o *GetRacksOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRacks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRacksOKBody) validateRacks(formats strfmt.Registry) error {

	if swag.IsZero(o.Racks) { // not required
		return nil
	}

	for i := 0; i < len(o.Racks); i++ {
		if swag.IsZero(o.Racks[i]) { // not required
			continue
		}

		if o.Racks[i] != nil {
			if err := o.Racks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRacksOK" + "." + "racks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRacksOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRacksOKBody) UnmarshalBinary(b []byte) error {
	var res GetRacksOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
