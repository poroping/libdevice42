// Code generated by go-swagger; DO NOT EDIT.

package patch_panels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/poroping/libdevice42/models"
)

// GetPatchPanelIDReader is a Reader for the GetPatchPanelID structure.
type GetPatchPanelIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPatchPanelIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPatchPanelIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPatchPanelIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPatchPanelIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPatchPanelIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPatchPanelIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetPatchPanelIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetPatchPanelIDGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPatchPanelIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetPatchPanelIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPatchPanelIDOK creates a GetPatchPanelIDOK with default headers values
func NewGetPatchPanelIDOK() *GetPatchPanelIDOK {
	return &GetPatchPanelIDOK{}
}

/*GetPatchPanelIDOK handles this case with default header values.

The above command returns results like this:
*/
type GetPatchPanelIDOK struct {
	Payload *models.PatchPanel
}

func (o *GetPatchPanelIDOK) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdOK  %+v", 200, o.Payload)
}

func (o *GetPatchPanelIDOK) GetPayload() *models.PatchPanel {
	return o.Payload
}

func (o *GetPatchPanelIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchPanel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPatchPanelIDBadRequest creates a GetPatchPanelIDBadRequest with default headers values
func NewGetPatchPanelIDBadRequest() *GetPatchPanelIDBadRequest {
	return &GetPatchPanelIDBadRequest{}
}

/*GetPatchPanelIDBadRequest handles this case with default header values.

Bad Request (A validation exception has occurred.)
*/
type GetPatchPanelIDBadRequest struct {
}

func (o *GetPatchPanelIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdBadRequest ", 400)
}

func (o *GetPatchPanelIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDUnauthorized creates a GetPatchPanelIDUnauthorized with default headers values
func NewGetPatchPanelIDUnauthorized() *GetPatchPanelIDUnauthorized {
	return &GetPatchPanelIDUnauthorized{}
}

/*GetPatchPanelIDUnauthorized handles this case with default header values.

Unauthorized (Your credentials suck)
*/
type GetPatchPanelIDUnauthorized struct {
}

func (o *GetPatchPanelIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdUnauthorized ", 401)
}

func (o *GetPatchPanelIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDForbidden creates a GetPatchPanelIDForbidden with default headers values
func NewGetPatchPanelIDForbidden() *GetPatchPanelIDForbidden {
	return &GetPatchPanelIDForbidden{}
}

/*GetPatchPanelIDForbidden handles this case with default header values.

Forbidden (The resource requested is hidden)
*/
type GetPatchPanelIDForbidden struct {
}

func (o *GetPatchPanelIDForbidden) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdForbidden ", 403)
}

func (o *GetPatchPanelIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDNotFound creates a GetPatchPanelIDNotFound with default headers values
func NewGetPatchPanelIDNotFound() *GetPatchPanelIDNotFound {
	return &GetPatchPanelIDNotFound{}
}

/*GetPatchPanelIDNotFound handles this case with default header values.

Not Found (The specified resource could not be found)
*/
type GetPatchPanelIDNotFound struct {
}

func (o *GetPatchPanelIDNotFound) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdNotFound ", 404)
}

func (o *GetPatchPanelIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDMethodNotAllowed creates a GetPatchPanelIDMethodNotAllowed with default headers values
func NewGetPatchPanelIDMethodNotAllowed() *GetPatchPanelIDMethodNotAllowed {
	return &GetPatchPanelIDMethodNotAllowed{}
}

/*GetPatchPanelIDMethodNotAllowed handles this case with default header values.

Method Not Allowed (You tried to access a resource with an invalid method)
*/
type GetPatchPanelIDMethodNotAllowed struct {
}

func (o *GetPatchPanelIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdMethodNotAllowed ", 405)
}

func (o *GetPatchPanelIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDGone creates a GetPatchPanelIDGone with default headers values
func NewGetPatchPanelIDGone() *GetPatchPanelIDGone {
	return &GetPatchPanelIDGone{}
}

/*GetPatchPanelIDGone handles this case with default header values.

Gone (The resource requested has been removed from our servers)
*/
type GetPatchPanelIDGone struct {
}

func (o *GetPatchPanelIDGone) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdGone ", 410)
}

func (o *GetPatchPanelIDGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDInternalServerError creates a GetPatchPanelIDInternalServerError with default headers values
func NewGetPatchPanelIDInternalServerError() *GetPatchPanelIDInternalServerError {
	return &GetPatchPanelIDInternalServerError{}
}

/*GetPatchPanelIDInternalServerError handles this case with default header values.

Internal Server Error (Some parameter missing or issue with the server. Check with returned “msg” from the call.)
*/
type GetPatchPanelIDInternalServerError struct {
}

func (o *GetPatchPanelIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdInternalServerError ", 500)
}

func (o *GetPatchPanelIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPatchPanelIDServiceUnavailable creates a GetPatchPanelIDServiceUnavailable with default headers values
func NewGetPatchPanelIDServiceUnavailable() *GetPatchPanelIDServiceUnavailable {
	return &GetPatchPanelIDServiceUnavailable{}
}

/*GetPatchPanelIDServiceUnavailable handles this case with default header values.

Service Unavailable (Please check if your Device42 instance is working normally.)
*/
type GetPatchPanelIDServiceUnavailable struct {
}

func (o *GetPatchPanelIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /api/1.0/patch_panel/{ID}/][%d] getPatchPanelIdServiceUnavailable ", 503)
}

func (o *GetPatchPanelIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
